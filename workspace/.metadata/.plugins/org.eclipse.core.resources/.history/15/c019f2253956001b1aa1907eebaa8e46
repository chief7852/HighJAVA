package kr.or.ddit.basic;

// 은행의 입출금을 쓰레드로 처리하는 예제

public class ThreadTest17 {
	private int balance;	//잔액
	
	public int getBalance()
	{
		return balance;
	}
	
	public void setBalance(int balance)
	{
		this.balance = balance;
	}
	
	//입금하는 메서드
	public void deposit(int money)
	{
		balance += money;
	}
	
	// 출금하는 메서드 (출금 성공 : true, 출금실패 : false 반환)
	// 동기화 영역에서 호출하는 메서드도 동기화 처리를 해주어야 안전하다.
	
	
	public /*synchronized*/ boolean withdraw(int money)
	{
		synchronized (this) {	//동기화블럭
		if(balance >= money)
		{
			for(int i = 1; i <=100000000;i++){}//시간지연
			
			balance -= money;
			System.out.println("메서드안에서 balance = " + balance);
			return true;
		}else { return false;}

		}
	}
	
	public static void main(String[] args) {
		//공통 객체 생성
		final ThreadTest17 acount = new ThreadTest17();
		acount.setBalance(10000);		//잔액 10000원
		
		Runnable test = new  Runnable()
		{
			public void run() {
				//6000원 출금하기
				boolean result = acount.withdraw(6000);
				System.out.println("쓰레드 안에서 result = " + 
				result + ", balance = " + acount.getBalance());
			}
		};
		
		//---------------------------
		Thread th1 = new Thread(test);
		Thread th2 = new Thread(test);
//		Thread th1 = new Thread(test);
		th1.start();
		th2.start();
	}

}
