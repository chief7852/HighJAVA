package kr.or.ddit.basic;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;

public class MapTest {

	public static void main(String[] args) {
		/*
		 Map ==> key값과 value값을 한 쌍으로 관리하는 객체
		 		- key값은 중복을 허용하지 않고 순서가 없다.(Set의 특징을 갖는다.)
		 		- value값은 중복을 허용한다.
		 */
		HashMap<String, String> map = new HashMap<>();
		
		//자료추가 ==> put(key값, value값)
		map.put("name", "홍길동");
		map.put("addr", "대전");
		map.put("tel", "010-1234-5678");
		
//		System.out.println(map);
		
		// 자료 수정 ==> 데이터를 추가할 때 key값이 같으면
		//			    나중에 입력한 값이 저장된다.
		map.put("addr","서울");
		System.out.println(map);
		
		/*
		 	자료삭제 ==> remove(key값)
		 	==> 'key값'이 같은 자료를 찾아서 삭제한다.
		 	==> 반환값 : 삭제된 자료의 value값
		 */
//		String removeTel = map.remove("tel");
//		System.out.println(map);
//		System.out.println("삭제된 value값" +removeTel);
		
		/*
		 	자료읽기 ==> get(key값);
		 		==> 주어진 'key값'과 같이 저장된  value값을 반환한
		 */
		
		System.out.println("이름 : " + map.get("name"));
		System.out.println("전화번호 : " + map.get("tel"));
		System.out.println();
		
		/* 
		   key값이 존재하는지 여부를 나타내는 메서드 : containsKey(key값)
				==> 해당 'key값'이 있으면 true, 없으면 false
		*/
		System.out.println("addr 키값의 존재 여부 : " + map.containsKey("addr"));
		
		
		
		 //Map 객체에 저장된 모든 key값을 읽어와 Map의 데이터를 사용하는 방법
		 
		//방법 1) keySet 메서드 이용하기
		//		==> Map의 저장된 모든 key값들을 읽어와 Set형으로 반환한다.
		
		Set<String> keyset = map.keySet();
		Iterator<String> it = keyset.iterator();
		while(it.hasNext())
		{
			String key = it.next();
			String value = map.get(key);
			System.out.println(key + " : " + value);
		}
		System.out.println("----------------------------------------");
		
		ArrayList<String> list = new ArrayList<>(map.keySet());
		for(String str : list)
		{
			System.out.println(str + " : " + map.get(str));
		}
	}

}
